name: CI_CD
on:
  push:
    branches:
      - develop
      - feature/kubernetes_yaml

jobs:
#  run-test:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [ "3.8" ]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#
#      - name: Test with pytest
#        run: |
#          pytest

  build:
#    needs:
#      - run-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

#    - name: Login to NCP Container Registry
#      uses: docker/login-action@v2
#      with:
#        username: ${{ secrets.NCP_ACCESS_KEY_ID }}
#        password: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
#        registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
#
#    - name: build and push
#      uses: docker/build-push-action@v3
#      with:
#        context: .
#        file: ./Dockerfile
#        push: true
#        tags: |
#          ${{ secrets.NCP_CONTAINER_REGISTRY }}/catchtable:latest
#          ${{ secrets.NCP_CONTAINER_REGISTRY }}/catchtable:${{ github.run_number }}


    - name: IAM configure
      run: |
        export KUBE_CONFIG_TOKEN=${{ secrets.NCP_TOKEN }}
        kubectl --kubeconfig $KUBE_CONFIG_TOKEN -n development get pod
        kubectl --kubeconfig $KUBE_CONFIG_TOKEN -n development get deploy
        

#    - name: Install and configure kubectl
#      run: |
#        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
#        VERSION=v1.23.6
#        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
#          --progress-bar \
#          --location \
#          --remote-name
#        chmod +x kubectl
#        sudo mv kubectl /usr/local/bin/
#        echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
#
#    - name: Deploy
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#      run: |
#        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
#        export IMAGE_TAG=${{ env.SHORT_SHA }}
#        export KUBECONFIG=kubeconfig.yaml
#        envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
#        kubectl kustomize k8s | kubectl apply -f -
#
#
#
#
            
  
  
