name: CI_CD
on:
  push:
    branches:
      - develop
      - feature/kubernetes_yaml

jobs:
#  run-test:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [ "3.8" ]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#
#      - name: Test with pytest
#        run: |
#          pytest

  build:
##    needs:
##      - run-test
    runs-on: ubuntu-latest
    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v2
#
#    - name: Login to NCP Container Registry
#      uses: docker/login-action@v2
#      with:
#        username: ${{ secrets.NCP_ACCESS_KEY_ID }}
#        password: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
#        registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
#
#    - name: build and push
#      uses: docker/build-push-action@v3
#      with:
#        context: .
#        file: ./Dockerfile
#        push: true
#        tags: |
#          ${{ secrets.NCP_CONTAINER_REGISTRY }}/catchtable:latest
#          ${{ secrets.NCP_CONTAINER_REGISTRY }}/catchtable:${{ github.run_number }}


    - name: Configure token for cluster access
      env:
        TOKEN_CONFIG: ${{ secrets.NCP_TOKEN }}
      run: |
        echo $TOKEN_CONFIG | base64 --decode > kubeconfig-token.yaml
        export KUBE_CONFIG_TOKEN=kubeconfig-token.yaml
        kubectl --kubeconfig $KUBE_CONFIG_TOKEN -n development get pod
        kubectl --kubeconfig $KUBE_CONFIG_TOKEN -n development get deploy

    - name: deploy pod
      run: |
        kubectl --kubeconfig $KUBE_CONFIG_TOKEN apply -f k8s/base/namespace/namespaces_dev.yaml
        kubectl --kubeconfig $KUBE_CONFIG_TOKEN get namespaces

#    - name: Setup kustomize
#      run: |
#        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#        chmod u+x ./kustomize

#    - name: Deploy
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#      run: |
#        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
#        export IMAGE_TAG=${{ env.SHORT_SHA }}
#        export KUBECONFIG=kubeconfig.yaml
#        envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
#        kubectl kustomize k8s | kubectl apply -f -




            
  
  
